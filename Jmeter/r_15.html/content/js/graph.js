/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 538.0, "minX": 0.0, "maxY": 27593.0, "series": [{"data": [[0.0, 1879.0], [0.1, 1879.0], [0.2, 1879.0], [0.3, 1879.0], [0.4, 1879.0], [0.5, 1879.0], [0.6, 1879.0], [0.7, 1879.0], [0.8, 1879.0], [0.9, 1879.0], [1.0, 1879.0], [1.1, 1879.0], [1.2, 2031.0], [1.3, 2031.0], [1.4, 2031.0], [1.5, 2031.0], [1.6, 2031.0], [1.7, 2031.0], [1.8, 2031.0], [1.9, 2031.0], [2.0, 2031.0], [2.1, 2031.0], [2.2, 2031.0], [2.3, 2031.0], [2.4, 2041.0], [2.5, 2041.0], [2.6, 2041.0], [2.7, 2041.0], [2.8, 2041.0], [2.9, 2041.0], [3.0, 2041.0], [3.1, 2041.0], [3.2, 2041.0], [3.3, 2041.0], [3.4, 2041.0], [3.5, 2041.0], [3.6, 2052.0], [3.7, 2052.0], [3.8, 2052.0], [3.9, 2052.0], [4.0, 2052.0], [4.1, 2052.0], [4.2, 2052.0], [4.3, 2052.0], [4.4, 2052.0], [4.5, 2052.0], [4.6, 2052.0], [4.7, 2052.0], [4.8, 2272.0], [4.9, 2272.0], [5.0, 2272.0], [5.1, 2272.0], [5.2, 2272.0], [5.3, 2272.0], [5.4, 2272.0], [5.5, 2272.0], [5.6, 2272.0], [5.7, 2272.0], [5.8, 2272.0], [5.9, 2438.0], [6.0, 2438.0], [6.1, 2438.0], [6.2, 2438.0], [6.3, 2438.0], [6.4, 2438.0], [6.5, 2438.0], [6.6, 2438.0], [6.7, 2438.0], [6.8, 2438.0], [6.9, 2438.0], [7.0, 2438.0], [7.1, 2492.0], [7.2, 2492.0], [7.3, 2492.0], [7.4, 2492.0], [7.5, 2492.0], [7.6, 2492.0], [7.7, 2492.0], [7.8, 2492.0], [7.9, 2492.0], [8.0, 2492.0], [8.1, 2492.0], [8.2, 2492.0], [8.3, 2593.0], [8.4, 2593.0], [8.5, 2593.0], [8.6, 2593.0], [8.7, 2593.0], [8.8, 2593.0], [8.9, 2593.0], [9.0, 2593.0], [9.1, 2593.0], [9.2, 2593.0], [9.3, 2593.0], [9.4, 2593.0], [9.5, 2623.0], [9.6, 2623.0], [9.7, 2623.0], [9.8, 2623.0], [9.9, 2623.0], [10.0, 2623.0], [10.1, 2623.0], [10.2, 2623.0], [10.3, 2623.0], [10.4, 2623.0], [10.5, 2623.0], [10.6, 2710.0], [10.7, 2710.0], [10.8, 2710.0], [10.9, 2710.0], [11.0, 2710.0], [11.1, 2710.0], [11.2, 2710.0], [11.3, 2710.0], [11.4, 2710.0], [11.5, 2710.0], [11.6, 2710.0], [11.7, 2710.0], [11.8, 2775.0], [11.9, 2775.0], [12.0, 2775.0], [12.1, 2775.0], [12.2, 2775.0], [12.3, 2775.0], [12.4, 2775.0], [12.5, 2775.0], [12.6, 2775.0], [12.7, 2775.0], [12.8, 2775.0], [12.9, 2775.0], [13.0, 2820.0], [13.1, 2820.0], [13.2, 2820.0], [13.3, 2820.0], [13.4, 2820.0], [13.5, 2820.0], [13.6, 2820.0], [13.7, 2820.0], [13.8, 2820.0], [13.9, 2820.0], [14.0, 2820.0], [14.1, 2820.0], [14.2, 2886.0], [14.3, 2886.0], [14.4, 2886.0], [14.5, 2886.0], [14.6, 2886.0], [14.7, 2886.0], [14.8, 2886.0], [14.9, 2886.0], [15.0, 2886.0], [15.1, 2886.0], [15.2, 2886.0], [15.3, 3032.0], [15.4, 3032.0], [15.5, 3032.0], [15.6, 3032.0], [15.7, 3032.0], [15.8, 3032.0], [15.9, 3032.0], [16.0, 3032.0], [16.1, 3032.0], [16.2, 3032.0], [16.3, 3032.0], [16.4, 3032.0], [16.5, 3116.0], [16.6, 3116.0], [16.7, 3116.0], [16.8, 3116.0], [16.9, 3116.0], [17.0, 3116.0], [17.1, 3116.0], [17.2, 3116.0], [17.3, 3116.0], [17.4, 3116.0], [17.5, 3116.0], [17.6, 3116.0], [17.7, 3139.0], [17.8, 3139.0], [17.9, 3139.0], [18.0, 3139.0], [18.1, 3139.0], [18.2, 3139.0], [18.3, 3139.0], [18.4, 3139.0], [18.5, 3139.0], [18.6, 3139.0], [18.7, 3139.0], [18.8, 3139.0], [18.9, 3168.0], [19.0, 3168.0], [19.1, 3168.0], [19.2, 3168.0], [19.3, 3168.0], [19.4, 3168.0], [19.5, 3168.0], [19.6, 3168.0], [19.7, 3168.0], [19.8, 3168.0], [19.9, 3168.0], [20.0, 3174.0], [20.1, 3174.0], [20.2, 3174.0], [20.3, 3174.0], [20.4, 3174.0], [20.5, 3174.0], [20.6, 3174.0], [20.7, 3174.0], [20.8, 3174.0], [20.9, 3174.0], [21.0, 3174.0], [21.1, 3174.0], [21.2, 3305.0], [21.3, 3305.0], [21.4, 3305.0], [21.5, 3305.0], [21.6, 3305.0], [21.7, 3305.0], [21.8, 3305.0], [21.9, 3305.0], [22.0, 3305.0], [22.1, 3305.0], [22.2, 3305.0], [22.3, 3305.0], [22.4, 3317.0], [22.5, 3317.0], [22.6, 3317.0], [22.7, 3317.0], [22.8, 3317.0], [22.9, 3317.0], [23.0, 3317.0], [23.1, 3317.0], [23.2, 3317.0], [23.3, 3317.0], [23.4, 3317.0], [23.5, 3317.0], [23.6, 3325.0], [23.7, 3325.0], [23.8, 3325.0], [23.9, 3325.0], [24.0, 3325.0], [24.1, 3325.0], [24.2, 3325.0], [24.3, 3325.0], [24.4, 3325.0], [24.5, 3325.0], [24.6, 3325.0], [24.7, 3325.0], [24.8, 3405.0], [24.9, 3405.0], [25.0, 3405.0], [25.1, 3405.0], [25.2, 3405.0], [25.3, 3405.0], [25.4, 3405.0], [25.5, 3405.0], [25.6, 3405.0], [25.7, 3405.0], [25.8, 3405.0], [25.9, 3405.0], [26.0, 3405.0], [26.1, 3405.0], [26.2, 3405.0], [26.3, 3405.0], [26.4, 3405.0], [26.5, 3405.0], [26.6, 3405.0], [26.7, 3405.0], [26.8, 3405.0], [26.9, 3405.0], [27.0, 3405.0], [27.1, 3507.0], [27.2, 3507.0], [27.3, 3507.0], [27.4, 3507.0], [27.5, 3507.0], [27.6, 3507.0], [27.7, 3507.0], [27.8, 3507.0], [27.9, 3507.0], [28.0, 3507.0], [28.1, 3507.0], [28.2, 3507.0], [28.3, 3589.0], [28.4, 3589.0], [28.5, 3589.0], [28.6, 3589.0], [28.7, 3589.0], [28.8, 3589.0], [28.9, 3589.0], [29.0, 3589.0], [29.1, 3589.0], [29.2, 3589.0], [29.3, 3589.0], [29.4, 3589.0], [29.5, 3788.0], [29.6, 3788.0], [29.7, 3788.0], [29.8, 3788.0], [29.9, 3788.0], [30.0, 3788.0], [30.1, 3788.0], [30.2, 3788.0], [30.3, 3788.0], [30.4, 3788.0], [30.5, 3788.0], [30.6, 3871.0], [30.7, 3871.0], [30.8, 3871.0], [30.9, 3871.0], [31.0, 3871.0], [31.1, 3871.0], [31.2, 3871.0], [31.3, 3871.0], [31.4, 3871.0], [31.5, 3871.0], [31.6, 3871.0], [31.7, 3871.0], [31.8, 4191.0], [31.9, 4191.0], [32.0, 4191.0], [32.1, 4191.0], [32.2, 4191.0], [32.3, 4191.0], [32.4, 4191.0], [32.5, 4191.0], [32.6, 4191.0], [32.7, 4191.0], [32.8, 4191.0], [32.9, 4191.0], [33.0, 4422.0], [33.1, 4422.0], [33.2, 4422.0], [33.3, 4422.0], [33.4, 4422.0], [33.5, 4422.0], [33.6, 4422.0], [33.7, 4422.0], [33.8, 4422.0], [33.9, 4422.0], [34.0, 4422.0], [34.1, 4422.0], [34.2, 4723.0], [34.3, 4723.0], [34.4, 4723.0], [34.5, 4723.0], [34.6, 4723.0], [34.7, 4723.0], [34.8, 4723.0], [34.9, 4723.0], [35.0, 4723.0], [35.1, 4723.0], [35.2, 4723.0], [35.3, 4902.0], [35.4, 4902.0], [35.5, 4902.0], [35.6, 4902.0], [35.7, 4902.0], [35.8, 4902.0], [35.9, 4902.0], [36.0, 4902.0], [36.1, 4902.0], [36.2, 4902.0], [36.3, 4902.0], [36.4, 4902.0], [36.5, 5438.0], [36.6, 5438.0], [36.7, 5438.0], [36.8, 5438.0], [36.9, 5438.0], [37.0, 5438.0], [37.1, 5438.0], [37.2, 5438.0], [37.3, 5438.0], [37.4, 5438.0], [37.5, 5438.0], [37.6, 5438.0], [37.7, 5613.0], [37.8, 5613.0], [37.9, 5613.0], [38.0, 5613.0], [38.1, 5613.0], [38.2, 5613.0], [38.3, 5613.0], [38.4, 5613.0], [38.5, 5613.0], [38.6, 5613.0], [38.7, 5613.0], [38.8, 5613.0], [38.9, 5832.0], [39.0, 5832.0], [39.1, 5832.0], [39.2, 5832.0], [39.3, 5832.0], [39.4, 5832.0], [39.5, 5832.0], [39.6, 5832.0], [39.7, 5832.0], [39.8, 5832.0], [39.9, 5832.0], [40.0, 5832.0], [40.1, 5940.0], [40.2, 5940.0], [40.3, 5940.0], [40.4, 5940.0], [40.5, 5940.0], [40.6, 5940.0], [40.7, 5940.0], [40.8, 5940.0], [40.9, 5940.0], [41.0, 5940.0], [41.1, 5940.0], [41.2, 6153.0], [41.3, 6153.0], [41.4, 6153.0], [41.5, 6153.0], [41.6, 6153.0], [41.7, 6153.0], [41.8, 6153.0], [41.9, 6153.0], [42.0, 6153.0], [42.1, 6153.0], [42.2, 6153.0], [42.3, 6153.0], [42.4, 6312.0], [42.5, 6312.0], [42.6, 6312.0], [42.7, 6312.0], [42.8, 6312.0], [42.9, 6312.0], [43.0, 6312.0], [43.1, 6312.0], [43.2, 6312.0], [43.3, 6312.0], [43.4, 6312.0], [43.5, 6312.0], [43.6, 6315.0], [43.7, 6315.0], [43.8, 6315.0], [43.9, 6315.0], [44.0, 6315.0], [44.1, 6315.0], [44.2, 6315.0], [44.3, 6315.0], [44.4, 6315.0], [44.5, 6315.0], [44.6, 6315.0], [44.7, 6315.0], [44.8, 6370.0], [44.9, 6370.0], [45.0, 6370.0], [45.1, 6370.0], [45.2, 6370.0], [45.3, 6370.0], [45.4, 6370.0], [45.5, 6370.0], [45.6, 6370.0], [45.7, 6370.0], [45.8, 6370.0], [45.9, 6402.0], [46.0, 6402.0], [46.1, 6402.0], [46.2, 6402.0], [46.3, 6402.0], [46.4, 6402.0], [46.5, 6402.0], [46.6, 6402.0], [46.7, 6402.0], [46.8, 6402.0], [46.9, 6402.0], [47.0, 6402.0], [47.1, 6779.0], [47.2, 6779.0], [47.3, 6779.0], [47.4, 6779.0], [47.5, 6779.0], [47.6, 6779.0], [47.7, 6779.0], [47.8, 6779.0], [47.9, 6779.0], [48.0, 6779.0], [48.1, 6779.0], [48.2, 6779.0], [48.3, 6826.0], [48.4, 6826.0], [48.5, 6826.0], [48.6, 6826.0], [48.7, 6826.0], [48.8, 6826.0], [48.9, 6826.0], [49.0, 6826.0], [49.1, 6826.0], [49.2, 6826.0], [49.3, 6826.0], [49.4, 6826.0], [49.5, 6891.0], [49.6, 6891.0], [49.7, 6891.0], [49.8, 6891.0], [49.9, 6891.0], [50.0, 6891.0], [50.1, 6891.0], [50.2, 6891.0], [50.3, 6891.0], [50.4, 6891.0], [50.5, 6891.0], [50.6, 7082.0], [50.7, 7082.0], [50.8, 7082.0], [50.9, 7082.0], [51.0, 7082.0], [51.1, 7082.0], [51.2, 7082.0], [51.3, 7082.0], [51.4, 7082.0], [51.5, 7082.0], [51.6, 7082.0], [51.7, 7082.0], [51.8, 7283.0], [51.9, 7283.0], [52.0, 7283.0], [52.1, 7283.0], [52.2, 7283.0], [52.3, 7283.0], [52.4, 7283.0], [52.5, 7283.0], [52.6, 7283.0], [52.7, 7283.0], [52.8, 7283.0], [52.9, 7283.0], [53.0, 7389.0], [53.1, 7389.0], [53.2, 7389.0], [53.3, 7389.0], [53.4, 7389.0], [53.5, 7389.0], [53.6, 7389.0], [53.7, 7389.0], [53.8, 7389.0], [53.9, 7389.0], [54.0, 7389.0], [54.1, 7389.0], [54.2, 7444.0], [54.3, 7444.0], [54.4, 7444.0], [54.5, 7444.0], [54.6, 7444.0], [54.7, 7444.0], [54.8, 7444.0], [54.9, 7444.0], [55.0, 7444.0], [55.1, 7444.0], [55.2, 7444.0], [55.3, 7654.0], [55.4, 7654.0], [55.5, 7654.0], [55.6, 7654.0], [55.7, 7654.0], [55.8, 7654.0], [55.9, 7654.0], [56.0, 7654.0], [56.1, 7654.0], [56.2, 7654.0], [56.3, 7654.0], [56.4, 7654.0], [56.5, 7927.0], [56.6, 7927.0], [56.7, 7927.0], [56.8, 7927.0], [56.9, 7927.0], [57.0, 7927.0], [57.1, 7927.0], [57.2, 7927.0], [57.3, 7927.0], [57.4, 7927.0], [57.5, 7927.0], [57.6, 7927.0], [57.7, 7945.0], [57.8, 7945.0], [57.9, 7945.0], [58.0, 7945.0], [58.1, 7945.0], [58.2, 7945.0], [58.3, 7945.0], [58.4, 7945.0], [58.5, 7945.0], [58.6, 7945.0], [58.7, 7945.0], [58.8, 7945.0], [58.9, 8390.0], [59.0, 8390.0], [59.1, 8390.0], [59.2, 8390.0], [59.3, 8390.0], [59.4, 8390.0], [59.5, 8390.0], [59.6, 8390.0], [59.7, 8390.0], [59.8, 8390.0], [59.9, 8390.0], [60.0, 8390.0], [60.1, 8789.0], [60.2, 8789.0], [60.3, 8789.0], [60.4, 8789.0], [60.5, 8789.0], [60.6, 8789.0], [60.7, 8789.0], [60.8, 8789.0], [60.9, 8789.0], [61.0, 8789.0], [61.1, 8789.0], [61.2, 8838.0], [61.3, 8838.0], [61.4, 8838.0], [61.5, 8838.0], [61.6, 8838.0], [61.7, 8838.0], [61.8, 8838.0], [61.9, 8838.0], [62.0, 8838.0], [62.1, 8838.0], [62.2, 8838.0], [62.3, 8838.0], [62.4, 9014.0], [62.5, 9014.0], [62.6, 9014.0], [62.7, 9014.0], [62.8, 9014.0], [62.9, 9014.0], [63.0, 9014.0], [63.1, 9014.0], [63.2, 9014.0], [63.3, 9014.0], [63.4, 9014.0], [63.5, 9014.0], [63.6, 9029.0], [63.7, 9029.0], [63.8, 9029.0], [63.9, 9029.0], [64.0, 9029.0], [64.1, 9029.0], [64.2, 9029.0], [64.3, 9029.0], [64.4, 9029.0], [64.5, 9029.0], [64.6, 9029.0], [64.7, 9029.0], [64.8, 9058.0], [64.9, 9058.0], [65.0, 9058.0], [65.1, 9058.0], [65.2, 9058.0], [65.3, 9058.0], [65.4, 9058.0], [65.5, 9058.0], [65.6, 9058.0], [65.7, 9058.0], [65.8, 9058.0], [65.9, 9255.0], [66.0, 9255.0], [66.1, 9255.0], [66.2, 9255.0], [66.3, 9255.0], [66.4, 9255.0], [66.5, 9255.0], [66.6, 9255.0], [66.7, 9255.0], [66.8, 9255.0], [66.9, 9255.0], [67.0, 9255.0], [67.1, 9277.0], [67.2, 9277.0], [67.3, 9277.0], [67.4, 9277.0], [67.5, 9277.0], [67.6, 9277.0], [67.7, 9277.0], [67.8, 9277.0], [67.9, 9277.0], [68.0, 9277.0], [68.1, 9277.0], [68.2, 9277.0], [68.3, 9534.0], [68.4, 9534.0], [68.5, 9534.0], [68.6, 9534.0], [68.7, 9534.0], [68.8, 9534.0], [68.9, 9534.0], [69.0, 9534.0], [69.1, 9534.0], [69.2, 9534.0], [69.3, 9534.0], [69.4, 9534.0], [69.5, 9794.0], [69.6, 9794.0], [69.7, 9794.0], [69.8, 9794.0], [69.9, 9794.0], [70.0, 9794.0], [70.1, 9794.0], [70.2, 9794.0], [70.3, 9794.0], [70.4, 9794.0], [70.5, 9794.0], [70.6, 9829.0], [70.7, 9829.0], [70.8, 9829.0], [70.9, 9829.0], [71.0, 9829.0], [71.1, 9829.0], [71.2, 9829.0], [71.3, 9829.0], [71.4, 9829.0], [71.5, 9829.0], [71.6, 9829.0], [71.7, 9829.0], [71.8, 9836.0], [71.9, 9836.0], [72.0, 9836.0], [72.1, 9836.0], [72.2, 9836.0], [72.3, 9836.0], [72.4, 9836.0], [72.5, 9836.0], [72.6, 9836.0], [72.7, 9836.0], [72.8, 9836.0], [72.9, 9836.0], [73.0, 10164.0], [73.1, 10164.0], [73.2, 10164.0], [73.3, 10164.0], [73.4, 10164.0], [73.5, 10164.0], [73.6, 10164.0], [73.7, 10164.0], [73.8, 10164.0], [73.9, 10164.0], [74.0, 10164.0], [74.1, 10164.0], [74.2, 10166.0], [74.3, 10166.0], [74.4, 10166.0], [74.5, 10166.0], [74.6, 10166.0], [74.7, 10166.0], [74.8, 10166.0], [74.9, 10166.0], [75.0, 10166.0], [75.1, 10166.0], [75.2, 10166.0], [75.3, 10370.0], [75.4, 10370.0], [75.5, 10370.0], [75.6, 10370.0], [75.7, 10370.0], [75.8, 10370.0], [75.9, 10370.0], [76.0, 10370.0], [76.1, 10370.0], [76.2, 10370.0], [76.3, 10370.0], [76.4, 10370.0], [76.5, 10610.0], [76.6, 10610.0], [76.7, 10610.0], [76.8, 10610.0], [76.9, 10610.0], [77.0, 10610.0], [77.1, 10610.0], [77.2, 10610.0], [77.3, 10610.0], [77.4, 10610.0], [77.5, 10610.0], [77.6, 10610.0], [77.7, 10634.0], [77.8, 10634.0], [77.9, 10634.0], [78.0, 10634.0], [78.1, 10634.0], [78.2, 10634.0], [78.3, 10634.0], [78.4, 10634.0], [78.5, 10634.0], [78.6, 10634.0], [78.7, 10634.0], [78.8, 10634.0], [78.9, 10732.0], [79.0, 10732.0], [79.1, 10732.0], [79.2, 10732.0], [79.3, 10732.0], [79.4, 10732.0], [79.5, 10732.0], [79.6, 10732.0], [79.7, 10732.0], [79.8, 10732.0], [79.9, 10732.0], [80.0, 10732.0], [80.1, 10837.0], [80.2, 10837.0], [80.3, 10837.0], [80.4, 10837.0], [80.5, 10837.0], [80.6, 10837.0], [80.7, 10837.0], [80.8, 10837.0], [80.9, 10837.0], [81.0, 10837.0], [81.1, 10837.0], [81.2, 10925.0], [81.3, 10925.0], [81.4, 10925.0], [81.5, 10925.0], [81.6, 10925.0], [81.7, 10925.0], [81.8, 10925.0], [81.9, 10925.0], [82.0, 10925.0], [82.1, 10925.0], [82.2, 10925.0], [82.3, 10925.0], [82.4, 10957.0], [82.5, 10957.0], [82.6, 10957.0], [82.7, 10957.0], [82.8, 10957.0], [82.9, 10957.0], [83.0, 10957.0], [83.1, 10957.0], [83.2, 10957.0], [83.3, 10957.0], [83.4, 10957.0], [83.5, 10957.0], [83.6, 11376.0], [83.7, 11376.0], [83.8, 11376.0], [83.9, 11376.0], [84.0, 11376.0], [84.1, 11376.0], [84.2, 11376.0], [84.3, 11376.0], [84.4, 11376.0], [84.5, 11376.0], [84.6, 11376.0], [84.7, 11376.0], [84.8, 11460.0], [84.9, 11460.0], [85.0, 11460.0], [85.1, 11460.0], [85.2, 11460.0], [85.3, 11460.0], [85.4, 11460.0], [85.5, 11460.0], [85.6, 11460.0], [85.7, 11460.0], [85.8, 11460.0], [85.9, 11570.0], [86.0, 11570.0], [86.1, 11570.0], [86.2, 11570.0], [86.3, 11570.0], [86.4, 11570.0], [86.5, 11570.0], [86.6, 11570.0], [86.7, 11570.0], [86.8, 11570.0], [86.9, 11570.0], [87.0, 11570.0], [87.1, 11702.0], [87.2, 11702.0], [87.3, 11702.0], [87.4, 11702.0], [87.5, 11702.0], [87.6, 11702.0], [87.7, 11702.0], [87.8, 11702.0], [87.9, 11702.0], [88.0, 11702.0], [88.1, 11702.0], [88.2, 11702.0], [88.3, 12011.0], [88.4, 12011.0], [88.5, 12011.0], [88.6, 12011.0], [88.7, 12011.0], [88.8, 12011.0], [88.9, 12011.0], [89.0, 12011.0], [89.1, 12011.0], [89.2, 12011.0], [89.3, 12011.0], [89.4, 12011.0], [89.5, 12172.0], [89.6, 12172.0], [89.7, 12172.0], [89.8, 12172.0], [89.9, 12172.0], [90.0, 12172.0], [90.1, 12172.0], [90.2, 12172.0], [90.3, 12172.0], [90.4, 12172.0], [90.5, 12172.0], [90.6, 12328.0], [90.7, 12328.0], [90.8, 12328.0], [90.9, 12328.0], [91.0, 12328.0], [91.1, 12328.0], [91.2, 12328.0], [91.3, 12328.0], [91.4, 12328.0], [91.5, 12328.0], [91.6, 12328.0], [91.7, 12328.0], [91.8, 12589.0], [91.9, 12589.0], [92.0, 12589.0], [92.1, 12589.0], [92.2, 12589.0], [92.3, 12589.0], [92.4, 12589.0], [92.5, 12589.0], [92.6, 12589.0], [92.7, 12589.0], [92.8, 12589.0], [92.9, 12589.0], [93.0, 12794.0], [93.1, 12794.0], [93.2, 12794.0], [93.3, 12794.0], [93.4, 12794.0], [93.5, 12794.0], [93.6, 12794.0], [93.7, 12794.0], [93.8, 12794.0], [93.9, 12794.0], [94.0, 12794.0], [94.1, 12794.0], [94.2, 12914.0], [94.3, 12914.0], [94.4, 12914.0], [94.5, 12914.0], [94.6, 12914.0], [94.7, 12914.0], [94.8, 12914.0], [94.9, 12914.0], [95.0, 12914.0], [95.1, 12914.0], [95.2, 12914.0], [95.3, 13423.0], [95.4, 13423.0], [95.5, 13423.0], [95.6, 13423.0], [95.7, 13423.0], [95.8, 13423.0], [95.9, 13423.0], [96.0, 13423.0], [96.1, 13423.0], [96.2, 13423.0], [96.3, 13423.0], [96.4, 13423.0], [96.5, 13502.0], [96.6, 13502.0], [96.7, 13502.0], [96.8, 13502.0], [96.9, 13502.0], [97.0, 13502.0], [97.1, 13502.0], [97.2, 13502.0], [97.3, 13502.0], [97.4, 13502.0], [97.5, 13502.0], [97.6, 13502.0], [97.7, 14216.0], [97.8, 14216.0], [97.9, 14216.0], [98.0, 14216.0], [98.1, 14216.0], [98.2, 14216.0], [98.3, 14216.0], [98.4, 14216.0], [98.5, 14216.0], [98.6, 14216.0], [98.7, 14216.0], [98.8, 14216.0], [98.9, 15145.0], [99.0, 15145.0], [99.1, 15145.0], [99.2, 15145.0], [99.3, 15145.0], [99.4, 15145.0], [99.5, 15145.0], [99.6, 15145.0], [99.7, 15145.0], [99.8, 15145.0], [99.9, 15145.0]], "isOverall": false, "label": "request-1-0", "isController": false}, {"data": [[0.0, 538.0], [0.1, 538.0], [0.2, 538.0], [0.3, 538.0], [0.4, 538.0], [0.5, 538.0], [0.6, 538.0], [0.7, 538.0], [0.8, 538.0], [0.9, 538.0], [1.0, 538.0], [1.1, 538.0], [1.2, 576.0], [1.3, 576.0], [1.4, 576.0], [1.5, 576.0], [1.6, 576.0], [1.7, 576.0], [1.8, 576.0], [1.9, 576.0], [2.0, 576.0], [2.1, 576.0], [2.2, 576.0], [2.3, 576.0], [2.4, 2638.0], [2.5, 2638.0], [2.6, 2638.0], [2.7, 2638.0], [2.8, 2638.0], [2.9, 2638.0], [3.0, 2638.0], [3.1, 2638.0], [3.2, 2638.0], [3.3, 2638.0], [3.4, 2638.0], [3.5, 2638.0], [3.6, 2799.0], [3.7, 2799.0], [3.8, 2799.0], [3.9, 2799.0], [4.0, 2799.0], [4.1, 2799.0], [4.2, 2799.0], [4.3, 2799.0], [4.4, 2799.0], [4.5, 2799.0], [4.6, 2799.0], [4.7, 2799.0], [4.8, 2888.0], [4.9, 2888.0], [5.0, 2888.0], [5.1, 2888.0], [5.2, 2888.0], [5.3, 2888.0], [5.4, 2888.0], [5.5, 2888.0], [5.6, 2888.0], [5.7, 2888.0], [5.8, 2888.0], [5.9, 3112.0], [6.0, 3112.0], [6.1, 3112.0], [6.2, 3112.0], [6.3, 3112.0], [6.4, 3112.0], [6.5, 3112.0], [6.6, 3112.0], [6.7, 3112.0], [6.8, 3112.0], [6.9, 3112.0], [7.0, 3112.0], [7.1, 3115.0], [7.2, 3115.0], [7.3, 3115.0], [7.4, 3115.0], [7.5, 3115.0], [7.6, 3115.0], [7.7, 3115.0], [7.8, 3115.0], [7.9, 3115.0], [8.0, 3115.0], [8.1, 3115.0], [8.2, 3115.0], [8.3, 3117.0], [8.4, 3117.0], [8.5, 3117.0], [8.6, 3117.0], [8.7, 3117.0], [8.8, 3117.0], [8.9, 3117.0], [9.0, 3117.0], [9.1, 3117.0], [9.2, 3117.0], [9.3, 3117.0], [9.4, 3117.0], [9.5, 3217.0], [9.6, 3217.0], [9.7, 3217.0], [9.8, 3217.0], [9.9, 3217.0], [10.0, 3217.0], [10.1, 3217.0], [10.2, 3217.0], [10.3, 3217.0], [10.4, 3217.0], [10.5, 3217.0], [10.6, 3481.0], [10.7, 3481.0], [10.8, 3481.0], [10.9, 3481.0], [11.0, 3481.0], [11.1, 3481.0], [11.2, 3481.0], [11.3, 3481.0], [11.4, 3481.0], [11.5, 3481.0], [11.6, 3481.0], [11.7, 3481.0], [11.8, 3628.0], [11.9, 3628.0], [12.0, 3628.0], [12.1, 3628.0], [12.2, 3628.0], [12.3, 3628.0], [12.4, 3628.0], [12.5, 3628.0], [12.6, 3628.0], [12.7, 3628.0], [12.8, 3628.0], [12.9, 3628.0], [13.0, 3744.0], [13.1, 3744.0], [13.2, 3744.0], [13.3, 3744.0], [13.4, 3744.0], [13.5, 3744.0], [13.6, 3744.0], [13.7, 3744.0], [13.8, 3744.0], [13.9, 3744.0], [14.0, 3744.0], [14.1, 3744.0], [14.2, 3896.0], [14.3, 3896.0], [14.4, 3896.0], [14.5, 3896.0], [14.6, 3896.0], [14.7, 3896.0], [14.8, 3896.0], [14.9, 3896.0], [15.0, 3896.0], [15.1, 3896.0], [15.2, 3896.0], [15.3, 3914.0], [15.4, 3914.0], [15.5, 3914.0], [15.6, 3914.0], [15.7, 3914.0], [15.8, 3914.0], [15.9, 3914.0], [16.0, 3914.0], [16.1, 3914.0], [16.2, 3914.0], [16.3, 3914.0], [16.4, 3914.0], [16.5, 3941.0], [16.6, 3941.0], [16.7, 3941.0], [16.8, 3941.0], [16.9, 3941.0], [17.0, 3941.0], [17.1, 3941.0], [17.2, 3941.0], [17.3, 3941.0], [17.4, 3941.0], [17.5, 3941.0], [17.6, 3941.0], [17.7, 4480.0], [17.8, 4480.0], [17.9, 4480.0], [18.0, 4480.0], [18.1, 4480.0], [18.2, 4480.0], [18.3, 4480.0], [18.4, 4480.0], [18.5, 4480.0], [18.6, 4480.0], [18.7, 4480.0], [18.8, 4480.0], [18.9, 4573.0], [19.0, 4573.0], [19.1, 4573.0], [19.2, 4573.0], [19.3, 4573.0], [19.4, 4573.0], [19.5, 4573.0], [19.6, 4573.0], [19.7, 4573.0], [19.8, 4573.0], [19.9, 4573.0], [20.0, 4606.0], [20.1, 4606.0], [20.2, 4606.0], [20.3, 4606.0], [20.4, 4606.0], [20.5, 4606.0], [20.6, 4606.0], [20.7, 4606.0], [20.8, 4606.0], [20.9, 4606.0], [21.0, 4606.0], [21.1, 4606.0], [21.2, 4619.0], [21.3, 4619.0], [21.4, 4619.0], [21.5, 4619.0], [21.6, 4619.0], [21.7, 4619.0], [21.8, 4619.0], [21.9, 4619.0], [22.0, 4619.0], [22.1, 4619.0], [22.2, 4619.0], [22.3, 4619.0], [22.4, 4867.0], [22.5, 4867.0], [22.6, 4867.0], [22.7, 4867.0], [22.8, 4867.0], [22.9, 4867.0], [23.0, 4867.0], [23.1, 4867.0], [23.2, 4867.0], [23.3, 4867.0], [23.4, 4867.0], [23.5, 4867.0], [23.6, 5229.0], [23.7, 5229.0], [23.8, 5229.0], [23.9, 5229.0], [24.0, 5229.0], [24.1, 5229.0], [24.2, 5229.0], [24.3, 5229.0], [24.4, 5229.0], [24.5, 5229.0], [24.6, 5229.0], [24.7, 5229.0], [24.8, 5283.0], [24.9, 5283.0], [25.0, 5283.0], [25.1, 5283.0], [25.2, 5283.0], [25.3, 5283.0], [25.4, 5283.0], [25.5, 5283.0], [25.6, 5283.0], [25.7, 5283.0], [25.8, 5283.0], [25.9, 6128.0], [26.0, 6128.0], [26.1, 6128.0], [26.2, 6128.0], [26.3, 6128.0], [26.4, 6128.0], [26.5, 6128.0], [26.6, 6128.0], [26.7, 6128.0], [26.8, 6128.0], [26.9, 6128.0], [27.0, 6128.0], [27.1, 6151.0], [27.2, 6151.0], [27.3, 6151.0], [27.4, 6151.0], [27.5, 6151.0], [27.6, 6151.0], [27.7, 6151.0], [27.8, 6151.0], [27.9, 6151.0], [28.0, 6151.0], [28.1, 6151.0], [28.2, 6151.0], [28.3, 6166.0], [28.4, 6166.0], [28.5, 6166.0], [28.6, 6166.0], [28.7, 6166.0], [28.8, 6166.0], [28.9, 6166.0], [29.0, 6166.0], [29.1, 6166.0], [29.2, 6166.0], [29.3, 6166.0], [29.4, 6166.0], [29.5, 6684.0], [29.6, 6684.0], [29.7, 6684.0], [29.8, 6684.0], [29.9, 6684.0], [30.0, 6684.0], [30.1, 6684.0], [30.2, 6684.0], [30.3, 6684.0], [30.4, 6684.0], [30.5, 6684.0], [30.6, 6852.0], [30.7, 6852.0], [30.8, 6852.0], [30.9, 6852.0], [31.0, 6852.0], [31.1, 6852.0], [31.2, 6852.0], [31.3, 6852.0], [31.4, 6852.0], [31.5, 6852.0], [31.6, 6852.0], [31.7, 6852.0], [31.8, 7697.0], [31.9, 7697.0], [32.0, 7697.0], [32.1, 7697.0], [32.2, 7697.0], [32.3, 7697.0], [32.4, 7697.0], [32.5, 7697.0], [32.6, 7697.0], [32.7, 7697.0], [32.8, 7697.0], [32.9, 7697.0], [33.0, 7887.0], [33.1, 7887.0], [33.2, 7887.0], [33.3, 7887.0], [33.4, 7887.0], [33.5, 7887.0], [33.6, 7887.0], [33.7, 7887.0], [33.8, 7887.0], [33.9, 7887.0], [34.0, 7887.0], [34.1, 7887.0], [34.2, 8051.0], [34.3, 8051.0], [34.4, 8051.0], [34.5, 8051.0], [34.6, 8051.0], [34.7, 8051.0], [34.8, 8051.0], [34.9, 8051.0], [35.0, 8051.0], [35.1, 8051.0], [35.2, 8051.0], [35.3, 8128.0], [35.4, 8128.0], [35.5, 8128.0], [35.6, 8128.0], [35.7, 8128.0], [35.8, 8128.0], [35.9, 8128.0], [36.0, 8128.0], [36.1, 8128.0], [36.2, 8128.0], [36.3, 8128.0], [36.4, 8128.0], [36.5, 8599.0], [36.6, 8599.0], [36.7, 8599.0], [36.8, 8599.0], [36.9, 8599.0], [37.0, 8599.0], [37.1, 8599.0], [37.2, 8599.0], [37.3, 8599.0], [37.4, 8599.0], [37.5, 8599.0], [37.6, 8599.0], [37.7, 8756.0], [37.8, 8756.0], [37.9, 8756.0], [38.0, 8756.0], [38.1, 8756.0], [38.2, 8756.0], [38.3, 8756.0], [38.4, 8756.0], [38.5, 8756.0], [38.6, 8756.0], [38.7, 8756.0], [38.8, 8756.0], [38.9, 8822.0], [39.0, 8822.0], [39.1, 8822.0], [39.2, 8822.0], [39.3, 8822.0], [39.4, 8822.0], [39.5, 8822.0], [39.6, 8822.0], [39.7, 8822.0], [39.8, 8822.0], [39.9, 8822.0], [40.0, 8822.0], [40.1, 8835.0], [40.2, 8835.0], [40.3, 8835.0], [40.4, 8835.0], [40.5, 8835.0], [40.6, 8835.0], [40.7, 8835.0], [40.8, 8835.0], [40.9, 8835.0], [41.0, 8835.0], [41.1, 8835.0], [41.2, 8943.0], [41.3, 8943.0], [41.4, 8943.0], [41.5, 8943.0], [41.6, 8943.0], [41.7, 8943.0], [41.8, 8943.0], [41.9, 8943.0], [42.0, 8943.0], [42.1, 8943.0], [42.2, 8943.0], [42.3, 8943.0], [42.4, 9675.0], [42.5, 9675.0], [42.6, 9675.0], [42.7, 9675.0], [42.8, 9675.0], [42.9, 9675.0], [43.0, 9675.0], [43.1, 9675.0], [43.2, 9675.0], [43.3, 9675.0], [43.4, 9675.0], [43.5, 9675.0], [43.6, 9778.0], [43.7, 9778.0], [43.8, 9778.0], [43.9, 9778.0], [44.0, 9778.0], [44.1, 9778.0], [44.2, 9778.0], [44.3, 9778.0], [44.4, 9778.0], [44.5, 9778.0], [44.6, 9778.0], [44.7, 9778.0], [44.8, 9811.0], [44.9, 9811.0], [45.0, 9811.0], [45.1, 9811.0], [45.2, 9811.0], [45.3, 9811.0], [45.4, 9811.0], [45.5, 9811.0], [45.6, 9811.0], [45.7, 9811.0], [45.8, 9811.0], [45.9, 9830.0], [46.0, 9830.0], [46.1, 9830.0], [46.2, 9830.0], [46.3, 9830.0], [46.4, 9830.0], [46.5, 9830.0], [46.6, 9830.0], [46.7, 9830.0], [46.8, 9830.0], [46.9, 9830.0], [47.0, 9830.0], [47.1, 9878.0], [47.2, 9878.0], [47.3, 9878.0], [47.4, 9878.0], [47.5, 9878.0], [47.6, 9878.0], [47.7, 9878.0], [47.8, 9878.0], [47.9, 9878.0], [48.0, 9878.0], [48.1, 9878.0], [48.2, 9878.0], [48.3, 9913.0], [48.4, 9913.0], [48.5, 9913.0], [48.6, 9913.0], [48.7, 9913.0], [48.8, 9913.0], [48.9, 9913.0], [49.0, 9913.0], [49.1, 9913.0], [49.2, 9913.0], [49.3, 9913.0], [49.4, 9913.0], [49.5, 9937.0], [49.6, 9937.0], [49.7, 9937.0], [49.8, 9937.0], [49.9, 9937.0], [50.0, 9937.0], [50.1, 9937.0], [50.2, 9937.0], [50.3, 9937.0], [50.4, 9937.0], [50.5, 9937.0], [50.6, 9963.0], [50.7, 9963.0], [50.8, 9963.0], [50.9, 9963.0], [51.0, 9963.0], [51.1, 9963.0], [51.2, 9963.0], [51.3, 9963.0], [51.4, 9963.0], [51.5, 9963.0], [51.6, 9963.0], [51.7, 9963.0], [51.8, 10578.0], [51.9, 10578.0], [52.0, 10578.0], [52.1, 10578.0], [52.2, 10578.0], [52.3, 10578.0], [52.4, 10578.0], [52.5, 10578.0], [52.6, 10578.0], [52.7, 10578.0], [52.8, 10578.0], [52.9, 10578.0], [53.0, 10779.0], [53.1, 10779.0], [53.2, 10779.0], [53.3, 10779.0], [53.4, 10779.0], [53.5, 10779.0], [53.6, 10779.0], [53.7, 10779.0], [53.8, 10779.0], [53.9, 10779.0], [54.0, 10779.0], [54.1, 10779.0], [54.2, 10820.0], [54.3, 10820.0], [54.4, 10820.0], [54.5, 10820.0], [54.6, 10820.0], [54.7, 10820.0], [54.8, 10820.0], [54.9, 10820.0], [55.0, 10820.0], [55.1, 10820.0], [55.2, 10820.0], [55.3, 10831.0], [55.4, 10831.0], [55.5, 10831.0], [55.6, 10831.0], [55.7, 10831.0], [55.8, 10831.0], [55.9, 10831.0], [56.0, 10831.0], [56.1, 10831.0], [56.2, 10831.0], [56.3, 10831.0], [56.4, 10831.0], [56.5, 10885.0], [56.6, 10885.0], [56.7, 10885.0], [56.8, 10885.0], [56.9, 10885.0], [57.0, 10885.0], [57.1, 10885.0], [57.2, 10885.0], [57.3, 10885.0], [57.4, 10885.0], [57.5, 10885.0], [57.6, 10885.0], [57.7, 10919.0], [57.8, 10919.0], [57.9, 10919.0], [58.0, 10919.0], [58.1, 10919.0], [58.2, 10919.0], [58.3, 10919.0], [58.4, 10919.0], [58.5, 10919.0], [58.6, 10919.0], [58.7, 10919.0], [58.8, 10919.0], [58.9, 11629.0], [59.0, 11629.0], [59.1, 11629.0], [59.2, 11629.0], [59.3, 11629.0], [59.4, 11629.0], [59.5, 11629.0], [59.6, 11629.0], [59.7, 11629.0], [59.8, 11629.0], [59.9, 11629.0], [60.0, 11629.0], [60.1, 11656.0], [60.2, 11656.0], [60.3, 11656.0], [60.4, 11656.0], [60.5, 11656.0], [60.6, 11656.0], [60.7, 11656.0], [60.8, 11656.0], [60.9, 11656.0], [61.0, 11656.0], [61.1, 11656.0], [61.2, 11661.0], [61.3, 11661.0], [61.4, 11661.0], [61.5, 11661.0], [61.6, 11661.0], [61.7, 11661.0], [61.8, 11661.0], [61.9, 11661.0], [62.0, 11661.0], [62.1, 11661.0], [62.2, 11661.0], [62.3, 11661.0], [62.4, 11718.0], [62.5, 11718.0], [62.6, 11718.0], [62.7, 11718.0], [62.8, 11718.0], [62.9, 11718.0], [63.0, 11718.0], [63.1, 11718.0], [63.2, 11718.0], [63.3, 11718.0], [63.4, 11718.0], [63.5, 11718.0], [63.6, 11726.0], [63.7, 11726.0], [63.8, 11726.0], [63.9, 11726.0], [64.0, 11726.0], [64.1, 11726.0], [64.2, 11726.0], [64.3, 11726.0], [64.4, 11726.0], [64.5, 11726.0], [64.6, 11726.0], [64.7, 11726.0], [64.8, 11733.0], [64.9, 11733.0], [65.0, 11733.0], [65.1, 11733.0], [65.2, 11733.0], [65.3, 11733.0], [65.4, 11733.0], [65.5, 11733.0], [65.6, 11733.0], [65.7, 11733.0], [65.8, 11733.0], [65.9, 11785.0], [66.0, 11785.0], [66.1, 11785.0], [66.2, 11785.0], [66.3, 11785.0], [66.4, 11785.0], [66.5, 11785.0], [66.6, 11785.0], [66.7, 11785.0], [66.8, 11785.0], [66.9, 11785.0], [67.0, 11785.0], [67.1, 11799.0], [67.2, 11799.0], [67.3, 11799.0], [67.4, 11799.0], [67.5, 11799.0], [67.6, 11799.0], [67.7, 11799.0], [67.8, 11799.0], [67.9, 11799.0], [68.0, 11799.0], [68.1, 11799.0], [68.2, 11799.0], [68.3, 11809.0], [68.4, 11809.0], [68.5, 11809.0], [68.6, 11809.0], [68.7, 11809.0], [68.8, 11809.0], [68.9, 11809.0], [69.0, 11809.0], [69.1, 11809.0], [69.2, 11809.0], [69.3, 11809.0], [69.4, 11809.0], [69.5, 11810.0], [69.6, 11810.0], [69.7, 11810.0], [69.8, 11810.0], [69.9, 11810.0], [70.0, 11810.0], [70.1, 11810.0], [70.2, 11810.0], [70.3, 11810.0], [70.4, 11810.0], [70.5, 11810.0], [70.6, 11815.0], [70.7, 11815.0], [70.8, 11815.0], [70.9, 11815.0], [71.0, 11815.0], [71.1, 11815.0], [71.2, 11815.0], [71.3, 11815.0], [71.4, 11815.0], [71.5, 11815.0], [71.6, 11815.0], [71.7, 11815.0], [71.8, 11927.0], [71.9, 11927.0], [72.0, 11927.0], [72.1, 11927.0], [72.2, 11927.0], [72.3, 11927.0], [72.4, 11927.0], [72.5, 11927.0], [72.6, 11927.0], [72.7, 11927.0], [72.8, 11927.0], [72.9, 11927.0], [73.0, 11939.0], [73.1, 11939.0], [73.2, 11939.0], [73.3, 11939.0], [73.4, 11939.0], [73.5, 11939.0], [73.6, 11939.0], [73.7, 11939.0], [73.8, 11939.0], [73.9, 11939.0], [74.0, 11939.0], [74.1, 11939.0], [74.2, 12743.0], [74.3, 12743.0], [74.4, 12743.0], [74.5, 12743.0], [74.6, 12743.0], [74.7, 12743.0], [74.8, 12743.0], [74.9, 12743.0], [75.0, 12743.0], [75.1, 12743.0], [75.2, 12743.0], [75.3, 12745.0], [75.4, 12745.0], [75.5, 12745.0], [75.6, 12745.0], [75.7, 12745.0], [75.8, 12745.0], [75.9, 12745.0], [76.0, 12745.0], [76.1, 12745.0], [76.2, 12745.0], [76.3, 12745.0], [76.4, 12745.0], [76.5, 12801.0], [76.6, 12801.0], [76.7, 12801.0], [76.8, 12801.0], [76.9, 12801.0], [77.0, 12801.0], [77.1, 12801.0], [77.2, 12801.0], [77.3, 12801.0], [77.4, 12801.0], [77.5, 12801.0], [77.6, 12801.0], [77.7, 12881.0], [77.8, 12881.0], [77.9, 12881.0], [78.0, 12881.0], [78.1, 12881.0], [78.2, 12881.0], [78.3, 12881.0], [78.4, 12881.0], [78.5, 12881.0], [78.6, 12881.0], [78.7, 12881.0], [78.8, 12881.0], [78.9, 12909.0], [79.0, 12909.0], [79.1, 12909.0], [79.2, 12909.0], [79.3, 12909.0], [79.4, 12909.0], [79.5, 12909.0], [79.6, 12909.0], [79.7, 12909.0], [79.8, 12909.0], [79.9, 12909.0], [80.0, 12909.0], [80.1, 12974.0], [80.2, 12974.0], [80.3, 12974.0], [80.4, 12974.0], [80.5, 12974.0], [80.6, 12974.0], [80.7, 12974.0], [80.8, 12974.0], [80.9, 12974.0], [81.0, 12974.0], [81.1, 12974.0], [81.2, 13670.0], [81.3, 13670.0], [81.4, 13670.0], [81.5, 13670.0], [81.6, 13670.0], [81.7, 13670.0], [81.8, 13670.0], [81.9, 13670.0], [82.0, 13670.0], [82.1, 13670.0], [82.2, 13670.0], [82.3, 13670.0], [82.4, 13709.0], [82.5, 13709.0], [82.6, 13709.0], [82.7, 13709.0], [82.8, 13709.0], [82.9, 13709.0], [83.0, 13709.0], [83.1, 13709.0], [83.2, 13709.0], [83.3, 13709.0], [83.4, 13709.0], [83.5, 13709.0], [83.6, 13730.0], [83.7, 13730.0], [83.8, 13730.0], [83.9, 13730.0], [84.0, 13730.0], [84.1, 13730.0], [84.2, 13730.0], [84.3, 13730.0], [84.4, 13730.0], [84.5, 13730.0], [84.6, 13730.0], [84.7, 13730.0], [84.8, 13746.0], [84.9, 13746.0], [85.0, 13746.0], [85.1, 13746.0], [85.2, 13746.0], [85.3, 13746.0], [85.4, 13746.0], [85.5, 13746.0], [85.6, 13746.0], [85.7, 13746.0], [85.8, 13746.0], [85.9, 13789.0], [86.0, 13789.0], [86.1, 13789.0], [86.2, 13789.0], [86.3, 13789.0], [86.4, 13789.0], [86.5, 13789.0], [86.6, 13789.0], [86.7, 13789.0], [86.8, 13789.0], [86.9, 13789.0], [87.0, 13789.0], [87.1, 13869.0], [87.2, 13869.0], [87.3, 13869.0], [87.4, 13869.0], [87.5, 13869.0], [87.6, 13869.0], [87.7, 13869.0], [87.8, 13869.0], [87.9, 13869.0], [88.0, 13869.0], [88.1, 13869.0], [88.2, 13869.0], [88.3, 14737.0], [88.4, 14737.0], [88.5, 14737.0], [88.6, 14737.0], [88.7, 14737.0], [88.8, 14737.0], [88.9, 14737.0], [89.0, 14737.0], [89.1, 14737.0], [89.2, 14737.0], [89.3, 14737.0], [89.4, 14737.0], [89.5, 14765.0], [89.6, 14765.0], [89.7, 14765.0], [89.8, 14765.0], [89.9, 14765.0], [90.0, 14765.0], [90.1, 14765.0], [90.2, 14765.0], [90.3, 14765.0], [90.4, 14765.0], [90.5, 14765.0], [90.6, 14786.0], [90.7, 14786.0], [90.8, 14786.0], [90.9, 14786.0], [91.0, 14786.0], [91.1, 14786.0], [91.2, 14786.0], [91.3, 14786.0], [91.4, 14786.0], [91.5, 14786.0], [91.6, 14786.0], [91.7, 14786.0], [91.8, 14798.0], [91.9, 14798.0], [92.0, 14798.0], [92.1, 14798.0], [92.2, 14798.0], [92.3, 14798.0], [92.4, 14798.0], [92.5, 14798.0], [92.6, 14798.0], [92.7, 14798.0], [92.8, 14798.0], [92.9, 14798.0], [93.0, 15706.0], [93.1, 15706.0], [93.2, 15706.0], [93.3, 15706.0], [93.4, 15706.0], [93.5, 15706.0], [93.6, 15706.0], [93.7, 15706.0], [93.8, 15706.0], [93.9, 15706.0], [94.0, 15706.0], [94.1, 15706.0], [94.2, 15787.0], [94.3, 15787.0], [94.4, 15787.0], [94.5, 15787.0], [94.6, 15787.0], [94.7, 15787.0], [94.8, 15787.0], [94.9, 15787.0], [95.0, 15787.0], [95.1, 15787.0], [95.2, 15787.0], [95.3, 16621.0], [95.4, 16621.0], [95.5, 16621.0], [95.6, 16621.0], [95.7, 16621.0], [95.8, 16621.0], [95.9, 16621.0], [96.0, 16621.0], [96.1, 16621.0], [96.2, 16621.0], [96.3, 16621.0], [96.4, 16621.0], [96.5, 16889.0], [96.6, 16889.0], [96.7, 16889.0], [96.8, 16889.0], [96.9, 16889.0], [97.0, 16889.0], [97.1, 16889.0], [97.2, 16889.0], [97.3, 16889.0], [97.4, 16889.0], [97.5, 16889.0], [97.6, 16889.0], [97.7, 18835.0], [97.8, 18835.0], [97.9, 18835.0], [98.0, 18835.0], [98.1, 18835.0], [98.2, 18835.0], [98.3, 18835.0], [98.4, 18835.0], [98.5, 18835.0], [98.6, 18835.0], [98.7, 18835.0], [98.8, 18835.0], [98.9, 19660.0], [99.0, 19660.0], [99.1, 19660.0], [99.2, 19660.0], [99.3, 19660.0], [99.4, 19660.0], [99.5, 19660.0], [99.6, 19660.0], [99.7, 19660.0], [99.8, 19660.0], [99.9, 19660.0]], "isOverall": false, "label": "request-1-1", "isController": false}, {"data": [[0.0, 5248.0], [0.1, 5248.0], [0.2, 5248.0], [0.3, 5248.0], [0.4, 5248.0], [0.5, 5248.0], [0.6, 5248.0], [0.7, 5248.0], [0.8, 5248.0], [0.9, 5248.0], [1.0, 5248.0], [1.1, 5248.0], [1.2, 5461.0], [1.3, 5461.0], [1.4, 5461.0], [1.5, 5461.0], [1.6, 5461.0], [1.7, 5461.0], [1.8, 5461.0], [1.9, 5461.0], [2.0, 5461.0], [2.1, 5461.0], [2.2, 5461.0], [2.3, 5461.0], [2.4, 5534.0], [2.5, 5534.0], [2.6, 5534.0], [2.7, 5534.0], [2.8, 5534.0], [2.9, 5534.0], [3.0, 5534.0], [3.1, 5534.0], [3.2, 5534.0], [3.3, 5534.0], [3.4, 5534.0], [3.5, 5534.0], [3.6, 5785.0], [3.7, 5785.0], [3.8, 5785.0], [3.9, 5785.0], [4.0, 5785.0], [4.1, 5785.0], [4.2, 5785.0], [4.3, 5785.0], [4.4, 5785.0], [4.5, 5785.0], [4.6, 5785.0], [4.7, 5785.0], [4.8, 6029.0], [4.9, 6029.0], [5.0, 6029.0], [5.1, 6029.0], [5.2, 6029.0], [5.3, 6029.0], [5.4, 6029.0], [5.5, 6029.0], [5.6, 6029.0], [5.7, 6029.0], [5.8, 6029.0], [5.9, 6105.0], [6.0, 6105.0], [6.1, 6105.0], [6.2, 6105.0], [6.3, 6105.0], [6.4, 6105.0], [6.5, 6105.0], [6.6, 6105.0], [6.7, 6105.0], [6.8, 6105.0], [6.9, 6105.0], [7.0, 6105.0], [7.1, 6706.0], [7.2, 6706.0], [7.3, 6706.0], [7.4, 6706.0], [7.5, 6706.0], [7.6, 6706.0], [7.7, 6706.0], [7.8, 6706.0], [7.9, 6706.0], [8.0, 6706.0], [8.1, 6706.0], [8.2, 6706.0], [8.3, 6802.0], [8.4, 6802.0], [8.5, 6802.0], [8.6, 6802.0], [8.7, 6802.0], [8.8, 6802.0], [8.9, 6802.0], [9.0, 6802.0], [9.1, 6802.0], [9.2, 6802.0], [9.3, 6802.0], [9.4, 6802.0], [9.5, 6827.0], [9.6, 6827.0], [9.7, 6827.0], [9.8, 6827.0], [9.9, 6827.0], [10.0, 6827.0], [10.1, 6827.0], [10.2, 6827.0], [10.3, 6827.0], [10.4, 6827.0], [10.5, 6827.0], [10.6, 6889.0], [10.7, 6889.0], [10.8, 6889.0], [10.9, 6889.0], [11.0, 6889.0], [11.1, 6889.0], [11.2, 6889.0], [11.3, 6889.0], [11.4, 6889.0], [11.5, 6889.0], [11.6, 6889.0], [11.7, 6889.0], [11.8, 6985.0], [11.9, 6985.0], [12.0, 6985.0], [12.1, 6985.0], [12.2, 6985.0], [12.3, 6985.0], [12.4, 6985.0], [12.5, 6985.0], [12.6, 6985.0], [12.7, 6985.0], [12.8, 6985.0], [12.9, 6985.0], [13.0, 7100.0], [13.1, 7100.0], [13.2, 7100.0], [13.3, 7100.0], [13.4, 7100.0], [13.5, 7100.0], [13.6, 7100.0], [13.7, 7100.0], [13.8, 7100.0], [13.9, 7100.0], [14.0, 7100.0], [14.1, 7100.0], [14.2, 7108.0], [14.3, 7108.0], [14.4, 7108.0], [14.5, 7108.0], [14.6, 7108.0], [14.7, 7108.0], [14.8, 7108.0], [14.9, 7108.0], [15.0, 7108.0], [15.1, 7108.0], [15.2, 7108.0], [15.3, 7222.0], [15.4, 7222.0], [15.5, 7222.0], [15.6, 7222.0], [15.7, 7222.0], [15.8, 7222.0], [15.9, 7222.0], [16.0, 7222.0], [16.1, 7222.0], [16.2, 7222.0], [16.3, 7222.0], [16.4, 7222.0], [16.5, 7282.0], [16.6, 7282.0], [16.7, 7282.0], [16.8, 7282.0], [16.9, 7282.0], [17.0, 7282.0], [17.1, 7282.0], [17.2, 7282.0], [17.3, 7282.0], [17.4, 7282.0], [17.5, 7282.0], [17.6, 7282.0], [17.7, 7309.0], [17.8, 7309.0], [17.9, 7309.0], [18.0, 7309.0], [18.1, 7309.0], [18.2, 7309.0], [18.3, 7309.0], [18.4, 7309.0], [18.5, 7309.0], [18.6, 7309.0], [18.7, 7309.0], [18.8, 7309.0], [18.9, 7421.0], [19.0, 7421.0], [19.1, 7421.0], [19.2, 7421.0], [19.3, 7421.0], [19.4, 7421.0], [19.5, 7421.0], [19.6, 7421.0], [19.7, 7421.0], [19.8, 7421.0], [19.9, 7421.0], [20.0, 7557.0], [20.1, 7557.0], [20.2, 7557.0], [20.3, 7557.0], [20.4, 7557.0], [20.5, 7557.0], [20.6, 7557.0], [20.7, 7557.0], [20.8, 7557.0], [20.9, 7557.0], [21.0, 7557.0], [21.1, 7557.0], [21.2, 7596.0], [21.3, 7596.0], [21.4, 7596.0], [21.5, 7596.0], [21.6, 7596.0], [21.7, 7596.0], [21.8, 7596.0], [21.9, 7596.0], [22.0, 7596.0], [22.1, 7596.0], [22.2, 7596.0], [22.3, 7596.0], [22.4, 8023.0], [22.5, 8023.0], [22.6, 8023.0], [22.7, 8023.0], [22.8, 8023.0], [22.9, 8023.0], [23.0, 8023.0], [23.1, 8023.0], [23.2, 8023.0], [23.3, 8023.0], [23.4, 8023.0], [23.5, 8023.0], [23.6, 10326.0], [23.7, 10326.0], [23.8, 10326.0], [23.9, 10326.0], [24.0, 10326.0], [24.1, 10326.0], [24.2, 10326.0], [24.3, 10326.0], [24.4, 10326.0], [24.5, 10326.0], [24.6, 10326.0], [24.7, 10326.0], [24.8, 10474.0], [24.9, 10474.0], [25.0, 10474.0], [25.1, 10474.0], [25.2, 10474.0], [25.3, 10474.0], [25.4, 10474.0], [25.5, 10474.0], [25.6, 10474.0], [25.7, 10474.0], [25.8, 10474.0], [25.9, 11193.0], [26.0, 11193.0], [26.1, 11193.0], [26.2, 11193.0], [26.3, 11193.0], [26.4, 11193.0], [26.5, 11193.0], [26.6, 11193.0], [26.7, 11193.0], [26.8, 11193.0], [26.9, 11193.0], [27.0, 11193.0], [27.1, 11377.0], [27.2, 11377.0], [27.3, 11377.0], [27.4, 11377.0], [27.5, 11377.0], [27.6, 11377.0], [27.7, 11377.0], [27.8, 11377.0], [27.9, 11377.0], [28.0, 11377.0], [28.1, 11377.0], [28.2, 11377.0], [28.3, 11611.0], [28.4, 11611.0], [28.5, 11611.0], [28.6, 11611.0], [28.7, 11611.0], [28.8, 11611.0], [28.9, 11611.0], [29.0, 11611.0], [29.1, 11611.0], [29.2, 11611.0], [29.3, 11611.0], [29.4, 11611.0], [29.5, 13319.0], [29.6, 13319.0], [29.7, 13319.0], [29.8, 13319.0], [29.9, 13319.0], [30.0, 13319.0], [30.1, 13319.0], [30.2, 13319.0], [30.3, 13319.0], [30.4, 13319.0], [30.5, 13319.0], [30.6, 13411.0], [30.7, 13411.0], [30.8, 13411.0], [30.9, 13411.0], [31.0, 13411.0], [31.1, 13411.0], [31.2, 13411.0], [31.3, 13411.0], [31.4, 13411.0], [31.5, 13411.0], [31.6, 13411.0], [31.7, 13411.0], [31.8, 14295.0], [31.9, 14295.0], [32.0, 14295.0], [32.1, 14295.0], [32.2, 14295.0], [32.3, 14295.0], [32.4, 14295.0], [32.5, 14295.0], [32.6, 14295.0], [32.7, 14295.0], [32.8, 14295.0], [32.9, 14295.0], [33.0, 14551.0], [33.1, 14551.0], [33.2, 14551.0], [33.3, 14551.0], [33.4, 14551.0], [33.5, 14551.0], [33.6, 14551.0], [33.7, 14551.0], [33.8, 14551.0], [33.9, 14551.0], [34.0, 14551.0], [34.1, 14551.0], [34.2, 14702.0], [34.3, 14702.0], [34.4, 14702.0], [34.5, 14702.0], [34.6, 14702.0], [34.7, 14702.0], [34.8, 14702.0], [34.9, 14702.0], [35.0, 14702.0], [35.1, 14702.0], [35.2, 14702.0], [35.3, 14939.0], [35.4, 14939.0], [35.5, 14939.0], [35.6, 14939.0], [35.7, 14939.0], [35.8, 14939.0], [35.9, 14939.0], [36.0, 14939.0], [36.1, 14939.0], [36.2, 14939.0], [36.3, 14939.0], [36.4, 14939.0], [36.5, 14979.0], [36.6, 14979.0], [36.7, 14979.0], [36.8, 14979.0], [36.9, 14979.0], [37.0, 14979.0], [37.1, 14979.0], [37.2, 14979.0], [37.3, 14979.0], [37.4, 14979.0], [37.5, 14979.0], [37.6, 14979.0], [37.7, 15124.0], [37.8, 15124.0], [37.9, 15124.0], [38.0, 15124.0], [38.1, 15124.0], [38.2, 15124.0], [38.3, 15124.0], [38.4, 15124.0], [38.5, 15124.0], [38.6, 15124.0], [38.7, 15124.0], [38.8, 15124.0], [38.9, 15442.0], [39.0, 15442.0], [39.1, 15442.0], [39.2, 15442.0], [39.3, 15442.0], [39.4, 15442.0], [39.5, 15442.0], [39.6, 15442.0], [39.7, 15442.0], [39.8, 15442.0], [39.9, 15442.0], [40.0, 15442.0], [40.1, 15622.0], [40.2, 15622.0], [40.3, 15622.0], [40.4, 15622.0], [40.5, 15622.0], [40.6, 15622.0], [40.7, 15622.0], [40.8, 15622.0], [40.9, 15622.0], [41.0, 15622.0], [41.1, 15622.0], [41.2, 15682.0], [41.3, 15682.0], [41.4, 15682.0], [41.5, 15682.0], [41.6, 15682.0], [41.7, 15682.0], [41.8, 15682.0], [41.9, 15682.0], [42.0, 15682.0], [42.1, 15682.0], [42.2, 15682.0], [42.3, 15682.0], [42.4, 15712.0], [42.5, 15712.0], [42.6, 15712.0], [42.7, 15712.0], [42.8, 15712.0], [42.9, 15712.0], [43.0, 15712.0], [43.1, 15712.0], [43.2, 15712.0], [43.3, 15712.0], [43.4, 15712.0], [43.5, 15712.0], [43.6, 15795.0], [43.7, 15795.0], [43.8, 15795.0], [43.9, 15795.0], [44.0, 15795.0], [44.1, 15795.0], [44.2, 15795.0], [44.3, 15795.0], [44.4, 15795.0], [44.5, 15795.0], [44.6, 15795.0], [44.7, 15795.0], [44.8, 16051.0], [44.9, 16051.0], [45.0, 16051.0], [45.1, 16051.0], [45.2, 16051.0], [45.3, 16051.0], [45.4, 16051.0], [45.5, 16051.0], [45.6, 16051.0], [45.7, 16051.0], [45.8, 16051.0], [45.9, 16144.0], [46.0, 16144.0], [46.1, 16144.0], [46.2, 16144.0], [46.3, 16144.0], [46.4, 16144.0], [46.5, 16144.0], [46.6, 16144.0], [46.7, 16144.0], [46.8, 16144.0], [46.9, 16144.0], [47.0, 16144.0], [47.1, 16259.0], [47.2, 16259.0], [47.3, 16259.0], [47.4, 16259.0], [47.5, 16259.0], [47.6, 16259.0], [47.7, 16259.0], [47.8, 16259.0], [47.9, 16259.0], [48.0, 16259.0], [48.1, 16259.0], [48.2, 16259.0], [48.3, 16517.0], [48.4, 16517.0], [48.5, 16517.0], [48.6, 16517.0], [48.7, 16517.0], [48.8, 16517.0], [48.9, 16517.0], [49.0, 16517.0], [49.1, 16517.0], [49.2, 16517.0], [49.3, 16517.0], [49.4, 16517.0], [49.5, 16742.0], [49.6, 16742.0], [49.7, 16742.0], [49.8, 16742.0], [49.9, 16742.0], [50.0, 16742.0], [50.1, 16742.0], [50.2, 16742.0], [50.3, 16742.0], [50.4, 16742.0], [50.5, 16742.0], [50.6, 16986.0], [50.7, 16986.0], [50.8, 16986.0], [50.9, 16986.0], [51.0, 16986.0], [51.1, 16986.0], [51.2, 16986.0], [51.3, 16986.0], [51.4, 16986.0], [51.5, 16986.0], [51.6, 16986.0], [51.7, 16986.0], [51.8, 18766.0], [51.9, 18766.0], [52.0, 18766.0], [52.1, 18766.0], [52.2, 18766.0], [52.3, 18766.0], [52.4, 18766.0], [52.5, 18766.0], [52.6, 18766.0], [52.7, 18766.0], [52.8, 18766.0], [52.9, 18766.0], [53.0, 19055.0], [53.1, 19055.0], [53.2, 19055.0], [53.3, 19055.0], [53.4, 19055.0], [53.5, 19055.0], [53.6, 19055.0], [53.7, 19055.0], [53.8, 19055.0], [53.9, 19055.0], [54.0, 19055.0], [54.1, 19055.0], [54.2, 19129.0], [54.3, 19129.0], [54.4, 19129.0], [54.5, 19129.0], [54.6, 19129.0], [54.7, 19129.0], [54.8, 19129.0], [54.9, 19129.0], [55.0, 19129.0], [55.1, 19129.0], [55.2, 19129.0], [55.3, 19403.0], [55.4, 19403.0], [55.5, 19403.0], [55.6, 19403.0], [55.7, 19403.0], [55.8, 19403.0], [55.9, 19403.0], [56.0, 19403.0], [56.1, 19403.0], [56.2, 19403.0], [56.3, 19403.0], [56.4, 19403.0], [56.5, 19429.0], [56.6, 19429.0], [56.7, 19429.0], [56.8, 19429.0], [56.9, 19429.0], [57.0, 19429.0], [57.1, 19429.0], [57.2, 19429.0], [57.3, 19429.0], [57.4, 19429.0], [57.5, 19429.0], [57.6, 19429.0], [57.7, 19522.0], [57.8, 19522.0], [57.9, 19522.0], [58.0, 19522.0], [58.1, 19522.0], [58.2, 19522.0], [58.3, 19522.0], [58.4, 19522.0], [58.5, 19522.0], [58.6, 19522.0], [58.7, 19522.0], [58.8, 19522.0], [58.9, 19707.0], [59.0, 19707.0], [59.1, 19707.0], [59.2, 19707.0], [59.3, 19707.0], [59.4, 19707.0], [59.5, 19707.0], [59.6, 19707.0], [59.7, 19707.0], [59.8, 19707.0], [59.9, 19707.0], [60.0, 19707.0], [60.1, 19977.0], [60.2, 19977.0], [60.3, 19977.0], [60.4, 19977.0], [60.5, 19977.0], [60.6, 19977.0], [60.7, 19977.0], [60.8, 19977.0], [60.9, 19977.0], [61.0, 19977.0], [61.1, 19977.0], [61.2, 20513.0], [61.3, 20513.0], [61.4, 20513.0], [61.5, 20513.0], [61.6, 20513.0], [61.7, 20513.0], [61.8, 20513.0], [61.9, 20513.0], [62.0, 20513.0], [62.1, 20513.0], [62.2, 20513.0], [62.3, 20513.0], [62.4, 20735.0], [62.5, 20735.0], [62.6, 20735.0], [62.7, 20735.0], [62.8, 20735.0], [62.9, 20735.0], [63.0, 20735.0], [63.1, 20735.0], [63.2, 20735.0], [63.3, 20735.0], [63.4, 20735.0], [63.5, 20735.0], [63.6, 20740.0], [63.7, 20740.0], [63.8, 20740.0], [63.9, 20740.0], [64.0, 20740.0], [64.1, 20740.0], [64.2, 20740.0], [64.3, 20740.0], [64.4, 20740.0], [64.5, 20740.0], [64.6, 20740.0], [64.7, 20740.0], [64.8, 20844.0], [64.9, 20844.0], [65.0, 20844.0], [65.1, 20844.0], [65.2, 20844.0], [65.3, 20844.0], [65.4, 20844.0], [65.5, 20844.0], [65.6, 20844.0], [65.7, 20844.0], [65.8, 20844.0], [65.9, 20911.0], [66.0, 20911.0], [66.1, 20911.0], [66.2, 20911.0], [66.3, 20911.0], [66.4, 20911.0], [66.5, 20911.0], [66.6, 20911.0], [66.7, 20911.0], [66.8, 20911.0], [66.9, 20911.0], [67.0, 20911.0], [67.1, 21050.0], [67.2, 21050.0], [67.3, 21050.0], [67.4, 21050.0], [67.5, 21050.0], [67.6, 21050.0], [67.7, 21050.0], [67.8, 21050.0], [67.9, 21050.0], [68.0, 21050.0], [68.1, 21050.0], [68.2, 21050.0], [68.3, 21135.0], [68.4, 21135.0], [68.5, 21135.0], [68.6, 21135.0], [68.7, 21135.0], [68.8, 21135.0], [68.9, 21135.0], [69.0, 21135.0], [69.1, 21135.0], [69.2, 21135.0], [69.3, 21135.0], [69.4, 21135.0], [69.5, 21187.0], [69.6, 21187.0], [69.7, 21187.0], [69.8, 21187.0], [69.9, 21187.0], [70.0, 21187.0], [70.1, 21187.0], [70.2, 21187.0], [70.3, 21187.0], [70.4, 21187.0], [70.5, 21187.0], [70.6, 21202.0], [70.7, 21202.0], [70.8, 21202.0], [70.9, 21202.0], [71.0, 21202.0], [71.1, 21202.0], [71.2, 21202.0], [71.3, 21202.0], [71.4, 21202.0], [71.5, 21202.0], [71.6, 21202.0], [71.7, 21202.0], [71.8, 21528.0], [71.9, 21528.0], [72.0, 21528.0], [72.1, 21528.0], [72.2, 21528.0], [72.3, 21528.0], [72.4, 21528.0], [72.5, 21528.0], [72.6, 21528.0], [72.7, 21528.0], [72.8, 21528.0], [72.9, 21528.0], [73.0, 21554.0], [73.1, 21554.0], [73.2, 21554.0], [73.3, 21554.0], [73.4, 21554.0], [73.5, 21554.0], [73.6, 21554.0], [73.7, 21554.0], [73.8, 21554.0], [73.9, 21554.0], [74.0, 21554.0], [74.1, 21554.0], [74.2, 22329.0], [74.3, 22329.0], [74.4, 22329.0], [74.5, 22329.0], [74.6, 22329.0], [74.7, 22329.0], [74.8, 22329.0], [74.9, 22329.0], [75.0, 22329.0], [75.1, 22329.0], [75.2, 22329.0], [75.3, 22708.0], [75.4, 22708.0], [75.5, 22708.0], [75.6, 22708.0], [75.7, 22708.0], [75.8, 22708.0], [75.9, 22708.0], [76.0, 22708.0], [76.1, 22708.0], [76.2, 22708.0], [76.3, 22708.0], [76.4, 22708.0], [76.5, 22712.0], [76.6, 22712.0], [76.7, 22712.0], [76.8, 22712.0], [76.9, 22712.0], [77.0, 22712.0], [77.1, 22712.0], [77.2, 22712.0], [77.3, 22712.0], [77.4, 22712.0], [77.5, 22712.0], [77.6, 22712.0], [77.7, 22761.0], [77.8, 22761.0], [77.9, 22761.0], [78.0, 22761.0], [78.1, 22761.0], [78.2, 22761.0], [78.3, 22761.0], [78.4, 22761.0], [78.5, 22761.0], [78.6, 22761.0], [78.7, 22761.0], [78.8, 22761.0], [78.9, 23533.0], [79.0, 23533.0], [79.1, 23533.0], [79.2, 23533.0], [79.3, 23533.0], [79.4, 23533.0], [79.5, 23533.0], [79.6, 23533.0], [79.7, 23533.0], [79.8, 23533.0], [79.9, 23533.0], [80.0, 23533.0], [80.1, 23561.0], [80.2, 23561.0], [80.3, 23561.0], [80.4, 23561.0], [80.5, 23561.0], [80.6, 23561.0], [80.7, 23561.0], [80.8, 23561.0], [80.9, 23561.0], [81.0, 23561.0], [81.1, 23561.0], [81.2, 23973.0], [81.3, 23973.0], [81.4, 23973.0], [81.5, 23973.0], [81.6, 23973.0], [81.7, 23973.0], [81.8, 23973.0], [81.9, 23973.0], [82.0, 23973.0], [82.1, 23973.0], [82.2, 23973.0], [82.3, 23973.0], [82.4, 24098.0], [82.5, 24098.0], [82.6, 24098.0], [82.7, 24098.0], [82.8, 24098.0], [82.9, 24098.0], [83.0, 24098.0], [83.1, 24098.0], [83.2, 24098.0], [83.3, 24098.0], [83.4, 24098.0], [83.5, 24098.0], [83.6, 24277.0], [83.7, 24277.0], [83.8, 24277.0], [83.9, 24277.0], [84.0, 24277.0], [84.1, 24277.0], [84.2, 24277.0], [84.3, 24277.0], [84.4, 24277.0], [84.5, 24277.0], [84.6, 24277.0], [84.7, 24277.0], [84.8, 24389.0], [84.9, 24389.0], [85.0, 24389.0], [85.1, 24389.0], [85.2, 24389.0], [85.3, 24389.0], [85.4, 24389.0], [85.5, 24389.0], [85.6, 24389.0], [85.7, 24389.0], [85.8, 24389.0], [85.9, 24729.0], [86.0, 24729.0], [86.1, 24729.0], [86.2, 24729.0], [86.3, 24729.0], [86.4, 24729.0], [86.5, 24729.0], [86.6, 24729.0], [86.7, 24729.0], [86.8, 24729.0], [86.9, 24729.0], [87.0, 24729.0], [87.1, 25082.0], [87.2, 25082.0], [87.3, 25082.0], [87.4, 25082.0], [87.5, 25082.0], [87.6, 25082.0], [87.7, 25082.0], [87.8, 25082.0], [87.9, 25082.0], [88.0, 25082.0], [88.1, 25082.0], [88.2, 25082.0], [88.3, 25082.0], [88.4, 25082.0], [88.5, 25082.0], [88.6, 25082.0], [88.7, 25082.0], [88.8, 25082.0], [88.9, 25082.0], [89.0, 25082.0], [89.1, 25082.0], [89.2, 25082.0], [89.3, 25082.0], [89.4, 25082.0], [89.5, 25084.0], [89.6, 25084.0], [89.7, 25084.0], [89.8, 25084.0], [89.9, 25084.0], [90.0, 25084.0], [90.1, 25084.0], [90.2, 25084.0], [90.3, 25084.0], [90.4, 25084.0], [90.5, 25084.0], [90.6, 25210.0], [90.7, 25210.0], [90.8, 25210.0], [90.9, 25210.0], [91.0, 25210.0], [91.1, 25210.0], [91.2, 25210.0], [91.3, 25210.0], [91.4, 25210.0], [91.5, 25210.0], [91.6, 25210.0], [91.7, 25210.0], [91.8, 25311.0], [91.9, 25311.0], [92.0, 25311.0], [92.1, 25311.0], [92.2, 25311.0], [92.3, 25311.0], [92.4, 25311.0], [92.5, 25311.0], [92.6, 25311.0], [92.7, 25311.0], [92.8, 25311.0], [92.9, 25311.0], [93.0, 25322.0], [93.1, 25322.0], [93.2, 25322.0], [93.3, 25322.0], [93.4, 25322.0], [93.5, 25322.0], [93.6, 25322.0], [93.7, 25322.0], [93.8, 25322.0], [93.9, 25322.0], [94.0, 25322.0], [94.1, 25322.0], [94.2, 25758.0], [94.3, 25758.0], [94.4, 25758.0], [94.5, 25758.0], [94.6, 25758.0], [94.7, 25758.0], [94.8, 25758.0], [94.9, 25758.0], [95.0, 25758.0], [95.1, 25758.0], [95.2, 25758.0], [95.3, 26440.0], [95.4, 26440.0], [95.5, 26440.0], [95.6, 26440.0], [95.7, 26440.0], [95.8, 26440.0], [95.9, 26440.0], [96.0, 26440.0], [96.1, 26440.0], [96.2, 26440.0], [96.3, 26440.0], [96.4, 26440.0], [96.5, 26962.0], [96.6, 26962.0], [96.7, 26962.0], [96.8, 26962.0], [96.9, 26962.0], [97.0, 26962.0], [97.1, 26962.0], [97.2, 26962.0], [97.3, 26962.0], [97.4, 26962.0], [97.5, 26962.0], [97.6, 26962.0], [97.7, 27050.0], [97.8, 27050.0], [97.9, 27050.0], [98.0, 27050.0], [98.1, 27050.0], [98.2, 27050.0], [98.3, 27050.0], [98.4, 27050.0], [98.5, 27050.0], [98.6, 27050.0], [98.7, 27050.0], [98.8, 27050.0], [98.9, 27593.0], [99.0, 27593.0], [99.1, 27593.0], [99.2, 27593.0], [99.3, 27593.0], [99.4, 27593.0], [99.5, 27593.0], [99.6, 27593.0], [99.7, 27593.0], [99.8, 27593.0], [99.9, 27593.0]], "isOverall": false, "label": "request-1", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 5.0, "series": [{"data": [[1800.0, 1.0], [2000.0, 3.0], [2200.0, 1.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 1.0], [2700.0, 2.0], [2800.0, 2.0], [3000.0, 1.0], [3100.0, 4.0], [3300.0, 3.0], [3400.0, 2.0], [3500.0, 2.0], [3700.0, 1.0], [3800.0, 1.0], [4100.0, 1.0], [4400.0, 1.0], [4700.0, 1.0], [4900.0, 1.0], [5600.0, 1.0], [5400.0, 1.0], [5800.0, 1.0], [6100.0, 1.0], [5900.0, 1.0], [6300.0, 3.0], [6400.0, 1.0], [6700.0, 1.0], [6800.0, 2.0], [7000.0, 1.0], [7300.0, 1.0], [7400.0, 1.0], [7200.0, 1.0], [7600.0, 1.0], [7900.0, 2.0], [8300.0, 1.0], [8700.0, 1.0], [8800.0, 1.0], [9000.0, 3.0], [9200.0, 2.0], [9500.0, 1.0], [9700.0, 1.0], [10100.0, 2.0], [9800.0, 2.0], [10700.0, 1.0], [10600.0, 2.0], [10300.0, 1.0], [10800.0, 1.0], [10900.0, 2.0], [11700.0, 1.0], [11400.0, 1.0], [11500.0, 1.0], [11300.0, 1.0], [12000.0, 1.0], [12100.0, 1.0], [12300.0, 1.0], [12500.0, 1.0], [12700.0, 1.0], [12900.0, 1.0], [13400.0, 1.0], [13500.0, 1.0], [14200.0, 1.0], [15100.0, 1.0]], "isOverall": false, "label": "request-1-0", "isController": false}, {"data": [[2600.0, 1.0], [2800.0, 1.0], [2700.0, 1.0], [3100.0, 3.0], [3200.0, 1.0], [3400.0, 1.0], [3700.0, 1.0], [3600.0, 1.0], [3800.0, 1.0], [3900.0, 2.0], [4600.0, 2.0], [4500.0, 1.0], [4400.0, 1.0], [4800.0, 1.0], [5200.0, 2.0], [6100.0, 3.0], [6600.0, 1.0], [6800.0, 1.0], [7600.0, 1.0], [7800.0, 1.0], [8000.0, 1.0], [8100.0, 1.0], [8500.0, 1.0], [8700.0, 1.0], [8900.0, 1.0], [8800.0, 2.0], [9700.0, 1.0], [9600.0, 1.0], [9900.0, 3.0], [9800.0, 3.0], [10700.0, 1.0], [10500.0, 1.0], [10800.0, 3.0], [10900.0, 1.0], [11600.0, 3.0], [11700.0, 5.0], [11800.0, 3.0], [11900.0, 2.0], [12700.0, 2.0], [12900.0, 2.0], [12800.0, 2.0], [13700.0, 4.0], [13800.0, 1.0], [13600.0, 1.0], [14700.0, 4.0], [15700.0, 2.0], [16800.0, 1.0], [16600.0, 1.0], [18800.0, 1.0], [19600.0, 1.0], [500.0, 2.0]], "isOverall": false, "label": "request-1-1", "isController": false}, {"data": [[5200.0, 1.0], [5400.0, 1.0], [5500.0, 1.0], [5700.0, 1.0], [6000.0, 1.0], [6100.0, 1.0], [6800.0, 3.0], [6900.0, 1.0], [6700.0, 1.0], [7100.0, 2.0], [7200.0, 2.0], [7400.0, 1.0], [7300.0, 1.0], [7500.0, 2.0], [8000.0, 1.0], [10300.0, 1.0], [10400.0, 1.0], [11100.0, 1.0], [11300.0, 1.0], [11600.0, 1.0], [13300.0, 1.0], [13400.0, 1.0], [14200.0, 1.0], [14500.0, 1.0], [14700.0, 1.0], [14900.0, 2.0], [15100.0, 1.0], [15600.0, 2.0], [15700.0, 2.0], [15400.0, 1.0], [16000.0, 1.0], [16200.0, 1.0], [16100.0, 1.0], [16700.0, 1.0], [16900.0, 1.0], [16500.0, 1.0], [19100.0, 1.0], [19400.0, 2.0], [18700.0, 1.0], [19000.0, 1.0], [19500.0, 1.0], [19900.0, 1.0], [19700.0, 1.0], [20700.0, 2.0], [21100.0, 2.0], [20900.0, 1.0], [21200.0, 1.0], [20800.0, 1.0], [21000.0, 1.0], [21500.0, 2.0], [20500.0, 1.0], [22300.0, 1.0], [22700.0, 3.0], [23500.0, 2.0], [23900.0, 1.0], [24000.0, 1.0], [24200.0, 1.0], [24300.0, 1.0], [25300.0, 2.0], [25200.0, 1.0], [25000.0, 3.0], [24700.0, 1.0], [25700.0, 1.0], [26400.0, 1.0], [27000.0, 1.0], [26900.0, 1.0], [27500.0, 1.0]], "isOverall": false, "label": "request-1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 27500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 251.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 251.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.866666666666665, "minX": 1.63576326E12, "maxY": 23.333333333333332, "series": [{"data": [[1.63576326E12, 23.333333333333332], [1.635765E12, 6.866666666666665], [1.63576482E12, 13.04], [1.63576332E12, 12.101449275362322], [1.63576494E12, 9.9]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.635765E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 576.0, "minX": 1.0, "maxY": 21747.5, "series": [{"data": [[2.0, 9259.0], [3.0, 9021.75], [4.0, 8879.75], [5.0, 8598.75], [6.0, 8312.0], [7.0, 9211.2], [8.0, 7731.75], [9.0, 4808.333333333333], [10.0, 6957.2], [11.0, 7624.75], [12.0, 8540.666666666666], [13.0, 8197.75], [14.0, 6433.0], [15.0, 4785.25], [16.0, 5674.25], [1.0, 9802.75], [17.0, 6334.666666666667], [18.0, 6930.5], [19.0, 6077.5], [20.0, 3877.5], [21.0, 4280.0], [22.0, 4390.5], [23.0, 4779.0], [24.0, 6637.5], [25.0, 6312.0]], "isOverall": false, "label": "request-1-0", "isController": false}, {"data": [[11.200000000000001, 7150.894117647054]], "isOverall": false, "label": "request-1-0-Aggregated", "isController": false}, {"data": [[2.0, 8032.5], [3.0, 7445.25], [4.0, 7967.0], [5.0, 7897.5], [6.0, 7806.666666666667], [7.0, 8766.4], [8.0, 10195.0], [9.0, 5936.666666666666], [10.0, 8515.8], [11.0, 9848.0], [12.0, 11516.333333333334], [13.0, 13459.5], [14.0, 10491.5], [15.0, 11153.0], [16.0, 9880.0], [1.0, 6432.75], [17.0, 11443.0], [18.0, 14816.0], [19.0, 13769.5], [20.0, 16272.0], [21.0, 10658.333333333334], [22.0, 12799.5], [23.0, 11443.5], [24.0, 4212.5], [25.0, 576.0]], "isOverall": false, "label": "request-1-1", "isController": false}, {"data": [[11.200000000000001, 9467.223529411762]], "isOverall": false, "label": "request-1-1-Aggregated", "isController": false}, {"data": [[2.0, 17292.5], [3.0, 16467.5], [4.0, 16847.25], [5.0, 16496.5], [6.0, 16118.0], [7.0, 17977.6], [8.0, 17927.0], [9.0, 10745.333333333332], [10.0, 15473.0], [11.0, 17473.5], [12.0, 20057.333333333332], [13.0, 21658.0], [14.0, 16925.0], [15.0, 15939.25], [16.0, 15555.0], [1.0, 16236.0], [17.0, 17779.333333333332], [18.0, 21747.5], [19.0, 19847.0], [20.0, 20151.5], [21.0, 14940.0], [22.0, 17191.0], [23.0, 16224.0], [24.0, 10851.5], [25.0, 6889.0]], "isOverall": false, "label": "request-1", "isController": false}, {"data": [[11.200000000000001, 16618.741176470583]], "isOverall": false, "label": "request-1-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14.966666666666667, "minX": 1.63576326E12, "maxY": 47860.166666666664, "series": [{"data": [[1.63576326E12, 111.0], [1.635765E12, 28716.333333333332], [1.63576482E12, 47860.166666666664], [1.63576332E12, 44045.03333333333], [1.63576494E12, 38288.166666666664]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63576326E12, 14.966666666666667], [1.635765E12, 128.5], [1.63576482E12, 214.16666666666666], [1.63576332E12, 199.2], [1.63576494E12, 171.33333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.635765E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 576.0, "minX": 1.63576326E12, "maxY": 23814.33333333334, "series": [{"data": [[1.63576326E12, 5700.25], [1.635765E12, 3141.3999999999996], [1.63576482E12, 7817.759999999998], [1.63576332E12, 10963.142857142859], [1.63576494E12, 5611.7]], "isOverall": false, "label": "request-1-0", "isController": false}, {"data": [[1.63576326E12, 576.0], [1.635765E12, 3561.2000000000007], [1.63576482E12, 10767.36], [1.63576332E12, 13533.375], [1.63576494E12, 7836.75]], "isOverall": false, "label": "request-1-1", "isController": false}, {"data": [[1.63576326E12, 6889.0], [1.635765E12, 6703.333333333333], [1.63576482E12, 18585.76], [1.63576332E12, 23814.33333333334], [1.63576494E12, 13448.299999999997]], "isOverall": false, "label": "request-1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.635765E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 574.0, "minX": 1.63576326E12, "maxY": 12784.5, "series": [{"data": [[1.63576326E12, 5699.25], [1.635765E12, 3141.0000000000005], [1.63576482E12, 7817.64], [1.63576332E12, 10963.142857142859], [1.63576494E12, 5611.400000000001]], "isOverall": false, "label": "request-1-0", "isController": false}, {"data": [[1.63576326E12, 574.0], [1.635765E12, 2787.266666666667], [1.63576482E12, 9976.599999999999], [1.63576332E12, 12784.5], [1.63576494E12, 7059.700000000001]], "isOverall": false, "label": "request-1-1", "isController": false}, {"data": [[1.63576326E12, 6312.0], [1.635765E12, 3141.0000000000005], [1.63576482E12, 7817.64], [1.63576332E12, 10279.624999999998], [1.63576494E12, 5611.400000000001]], "isOverall": false, "label": "request-1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.635765E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.63576326E12, "maxY": 1644.0, "series": [{"data": [[1.63576326E12, 1309.5], [1.635765E12, 898.2666666666668], [1.63576482E12, 907.2], [1.63576332E12, 841.4761904761906], [1.63576494E12, 888.65]], "isOverall": false, "label": "request-1-0", "isController": false}, {"data": [[1.63576326E12, 0.0], [1.635765E12, 0.0], [1.63576482E12, 0.0], [1.63576332E12, 0.0], [1.63576494E12, 0.0]], "isOverall": false, "label": "request-1-1", "isController": false}, {"data": [[1.63576326E12, 1644.0], [1.635765E12, 898.2666666666668], [1.63576482E12, 907.2], [1.63576332E12, 886.0416666666666], [1.63576494E12, 888.65]], "isOverall": false, "label": "request-1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.635765E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1879.0, "minX": 1.63576326E12, "maxY": 27593.0, "series": [{"data": [[1.63576326E12, 6312.0], [1.635765E12, 8023.0], [1.63576482E12, 22329.0], [1.63576332E12, 27593.0], [1.63576494E12, 16517.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63576326E12, 6312.0], [1.635765E12, 7292.8], [1.63576482E12, 20966.600000000002], [1.63576332E12, 25313.2], [1.63576494E12, 15709.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63576326E12, 6312.0], [1.635765E12, 8023.0], [1.63576482E12, 22329.0], [1.63576332E12, 27593.0], [1.63576494E12, 16517.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63576326E12, 6312.0], [1.635765E12, 7543.499999999999], [1.63576482E12, 21267.2], [1.63576332E12, 26753.199999999997], [1.63576494E12, 16139.35]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63576326E12, 4723.0], [1.635765E12, 2031.0], [1.63576482E12, 2272.0], [1.63576332E12, 7082.0], [1.63576494E12, 1879.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63576326E12, 5883.0], [1.635765E12, 3871.0], [1.63576482E12, 11376.0], [1.63576332E12, 14216.0], [1.63576494E12, 8263.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.635765E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3732.5, "minX": 1.0, "maxY": 19733.0, "series": [{"data": [[2.0, 11059.0], [4.0, 11691.0], [1.0, 6879.5], [8.0, 13853.0], [5.0, 9815.0], [6.0, 11581.0], [3.0, 7152.0], [12.0, 15855.0], [14.0, 19733.0], [7.0, 4480.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5.0, 3732.5], [6.0, 5957.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 14.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3443.0, "minX": 1.0, "maxY": 12140.5, "series": [{"data": [[2.0, 6590.5], [4.0, 7235.5], [1.0, 6879.5], [8.0, 9220.5], [5.0, 5883.0], [6.0, 8534.0], [3.0, 3647.0], [12.0, 10140.0], [14.0, 12140.5], [7.0, 3589.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5.0, 3443.0], [6.0, 5687.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 14.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.63576326E12, "maxY": 1.25, "series": [{"data": [[1.63576326E12, 0.9], [1.635765E12, 0.75], [1.63576482E12, 1.25], [1.63576332E12, 0.35], [1.63576494E12, 1.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.635765E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.63576326E12, "maxY": 0.8333333333333334, "series": [{"data": [[1.635765E12, 0.5], [1.63576482E12, 0.8333333333333334], [1.63576332E12, 0.7666666666666667], [1.63576494E12, 0.6666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63576326E12, 0.06666666666666667], [1.635765E12, 0.25], [1.63576482E12, 0.4166666666666667], [1.63576332E12, 0.35], [1.63576494E12, 0.3333333333333333]], "isOverall": false, "label": "301", "isController": false}, {"data": [[1.63576326E12, 0.03333333333333333], [1.63576332E12, 0.03333333333333333]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.635765E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63576326E12, "maxY": 0.4166666666666667, "series": [{"data": [[1.63576326E12, 0.06666666666666667], [1.635765E12, 0.25], [1.63576482E12, 0.4166666666666667], [1.63576332E12, 0.35], [1.63576494E12, 0.3333333333333333]], "isOverall": false, "label": "request-1-0-success", "isController": false}, {"data": [[1.63576326E12, 0.016666666666666666], [1.63576332E12, 0.016666666666666666]], "isOverall": false, "label": "request-1-failure", "isController": false}, {"data": [[1.63576326E12, 0.016666666666666666], [1.63576332E12, 0.016666666666666666]], "isOverall": false, "label": "request-1-1-failure", "isController": false}, {"data": [[1.635765E12, 0.25], [1.63576482E12, 0.4166666666666667], [1.63576332E12, 0.38333333333333336], [1.63576494E12, 0.3333333333333333]], "isOverall": false, "label": "request-1-1-success", "isController": false}, {"data": [[1.635765E12, 0.25], [1.63576482E12, 0.4166666666666667], [1.63576332E12, 0.38333333333333336], [1.63576494E12, 0.3333333333333333]], "isOverall": false, "label": "request-1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.635765E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.63576326E12, "maxY": 1.25, "series": [{"data": [[1.63576326E12, 0.06666666666666667], [1.635765E12, 0.75], [1.63576482E12, 1.25], [1.63576332E12, 1.1166666666666667], [1.63576494E12, 1.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63576326E12, 0.03333333333333333], [1.63576332E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.635765E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

